using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Api.Dao;
using Api.Model;
using Api.Utils;

namespace Api.Service
{
    /// <summary>
    /// Classe respons√°vel pela camada de servi√ßo para a entidade Cargo.
    /// üîπ Demonstra a separa√ß√£o de responsabilidades: regras de neg√≥cio separadas do DAO e do controller.
    /// </summary>
    public class CargoService
    {
        // 1Ô∏è‚É£ Atributo privado para acessar o DAO
        private readonly CargoDAO _cargoDAO;

        /// <summary>
        /// Construtor com inje√ß√£o de depend√™ncia do DAO.
        /// üîπ Permite desacoplar a camada de servi√ßo da implementa√ß√£o do DAO.
        /// </summary>
        /// <param name="cargoDAODependency">Inst√¢ncia de CargoDAO</param>
        public CargoService(CargoDAO cargoDAODependency)
        {
            Console.WriteLine("‚¨ÜÔ∏è  CargoService.constructor()");

            // 2Ô∏è‚É£ atribui o DAO
            _cargoDAO = cargoDAODependency;
        }

        /// <summary>
        /// Cria um novo cargo
        /// üîπ Valida regras de dom√≠nio e impede duplicidade
        /// </summary>
        /// <param name="nomeCargo">Nome do cargo</param>
        /// <returns>ID do cargo criado</returns>
        /// <exception cref="ErrorResponse">Se o cargo j√° existir</exception>
        public async Task<int> CreateCargo(string nomeCargo)
        {
            Console.WriteLine("üü£ CargoService.CreateCargoAsync()");

            // 3Ô∏è‚É£ Cria objeto Cargo e aplica valida√ß√µes do modelo (setter)
            Cargo cargo = new Cargo();
            cargo.NomeCargo = nomeCargo; // dispara valida√ß√£o do NomeCargo

            // 4Ô∏è‚É£ Valida regra de neg√≥cio: n√£o permitir nomes duplicados
            List<Cargo> resultado = await _cargoDAO.FindByField("nomeCargo", cargo.NomeCargo);

            if (resultado.Count > 0)
            {
                // 5Ô∏è‚É£ Lan√ßa exce√ß√£o customizada se j√° existir
                throw new ErrorResponse(
                    400,
                    "Cargo j√° existe",
                    $"O cargo {cargo.NomeCargo} j√° existe"
                );
            }

            // 6Ô∏è‚É£ Chama DAO para inserir no banco
            return await _cargoDAO.Create(cargo);
        }

        /// <summary>
        /// Retorna todos os cargos
        /// üîπ Simples delega√ß√£o ao DAO
        /// </summary>
        public async Task<List<Cargo>> FindAll()
        {
            Console.WriteLine("üü£ CargoService.FindAll()");
            return await _cargoDAO.FindAll();
        }

        /// <summary>
        /// Retorna um cargo por ID
        /// üîπ Aplica valida√ß√£o do modelo antes de chamar o DAO
        /// </summary>
        public async Task<Cargo?> FindById(int idCargo)
        {
            Console.WriteLine("üü£ CargoService.FindById()");

            Cargo cargo = new Cargo();
            cargo.IdCargo = idCargo; // dispara valida√ß√£o do IdCargo

            return await _cargoDAO.FindById(cargo.IdCargo);
        }

        /// <summary>
        /// Atualiza um cargo existente
        /// üîπ Valida campos e chama DAO para persistir altera√ß√µes
        /// </summary>
        public async Task<bool> UpdateCargo(int idCargo, string nomeCargo)
        {
            Console.WriteLine("üü£ CargoService.UpdateCargo()");

            Cargo cargo = new Cargo();
            cargo.IdCargo = idCargo;    // dispara valida√ß√£o do IdCargo
            cargo.NomeCargo = nomeCargo; // dispara valida√ß√£o do NomeCargo

            return await _cargoDAO.Update(cargo);
        }

        /// <summary>
        /// Deleta um cargo por ID
        /// üîπ Valida ID antes de chamar DAO para exclus√£o
        /// </summary>
        public async Task<bool> DeleteCargo(int idCargo)
        {
            Console.WriteLine("üü£ CargoService.DeleteCargo()");

            Cargo cargo = new Cargo();
            cargo.IdCargo = idCargo;    // dispara valida√ß√£o do IdCargo
            return await _cargoDAO.Delete(cargo);
        }
    }
}
