using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Api.Dao;
using Api.Model;
using Api.Utils;

namespace Api.Service
{
    /// <summary>
    /// Classe respons√°vel pela camada de servi√ßo para a entidade Funcionario.
    /// üîπ Separa regras de neg√≥cio da camada de persist√™ncia (DAO).
    /// üîπ Ideal para adicionar valida√ß√µes, verifica√ß√µes e l√≥gica de autentica√ß√£o.
    /// </summary>
    public class FuncionarioService
    {
        // 1Ô∏è‚É£ Atributo privado para acessar o DAO
        private readonly FuncionarioDAO _funcionarioDAO;

        /// <summary>
        /// Construtor com inje√ß√£o de depend√™ncia do DAO.
        /// üîπ Permite desacoplar a camada de servi√ßo do DAO.
        /// </summary>
        public FuncionarioService(FuncionarioDAO funcionarioDAODependency)
        {
            Console.WriteLine("‚¨ÜÔ∏è  FuncionarioService.constructor()");

            // 2Ô∏è‚É£ Valida e atribui o DAO
            _funcionarioDAO = funcionarioDAODependency ?? throw new ArgumentNullException(nameof(funcionarioDAODependency));
        }

        /// <summary>
        /// Cria um novo funcion√°rio
        /// üîπ Valida regras de dom√≠nio (setters do modelo)
        /// üîπ Verifica duplicidade de email
        /// </summary>
        public async Task<int> CreateFuncionario(string nome, string email, string senha, int recebeValeTransporte, int cargoId)
        {
            Console.WriteLine("üü£ FuncionarioService.CreateFuncionario()");

            // 3Ô∏è‚É£ Cria objeto Funcionario e aplica valida√ß√µes do modelo
            Funcionario funcionario = new Funcionario();
            funcionario.NomeFuncionario = nome;
            funcionario.Email = email;
            funcionario.Senha = senha;
            funcionario.RecebeValeTransporte = recebeValeTransporte;
            funcionario.Cargo.IdCargo = cargoId;

            // 4Ô∏è‚É£ Valida regra de neg√≥cio: n√£o permitir emails duplicados
            List<Funcionario> resultado = await _funcionarioDAO.FindByField("email", funcionario.Email);
            if (resultado.Count > 0)
            {
                throw new ErrorResponse(
                    400,
                    "Email j√° cadastrado",
                    $"O email {funcionario.Email} j√° est√° em uso"
                );
            }

            // 5Ô∏è‚É£ Chama DAO para inserir no banco
            return await _funcionarioDAO.Create(funcionario);
        }

        /// <summary>
        /// Retorna todos os funcion√°rios
        /// üîπ Simples delega√ß√£o ao DAO
        /// </summary>
        public async Task<List<Funcionario>> FindAll()
        {
            Console.WriteLine("üü£ FuncionarioService.FindAll()");
            return await _funcionarioDAO.FindAll();
        }

        /// <summary>
        /// Retorna um funcion√°rio por ID
        /// üîπ Aplica valida√ß√£o do modelo antes de consultar
        /// </summary>
        public async Task<Funcionario?> FindById(int idFuncionario)
        {
            Console.WriteLine("üü£ FuncionarioService.FindById()");

            Funcionario funcionario = new Funcionario();
            funcionario.IdFuncionario = idFuncionario; // dispara valida√ß√£o do IdFuncionario

            return await _funcionarioDAO.FindById(funcionario.IdFuncionario);
        }

        /// <summary>
        /// Atualiza um funcion√°rio existente
        /// üîπ Aplica valida√ß√£o de campos do modelo antes de chamar DAO
        /// </summary>
        public async Task<bool> UpdateFuncionario(int idFuncionario, string nome, string email, string senha, int recebeValeTransporte, int cargoId)
        {
            Console.WriteLine("üü£ FuncionarioService.UpdateFuncionario()");

            Funcionario funcionario = new Funcionario();
            funcionario.IdFuncionario = idFuncionario;
            funcionario.NomeFuncionario = nome;
            funcionario.Email = email;
            funcionario.Senha = senha;
            funcionario.RecebeValeTransporte = recebeValeTransporte;
            funcionario.Cargo.IdCargo = cargoId;

            return await _funcionarioDAO.Update(funcionario);
        }

        /// <summary>
        /// Deleta um funcion√°rio por ID
        /// üîπ Valida ID antes de chamar DAO
        /// </summary>
        public async Task<bool> DeleteFuncionario(int idFuncionario)
        {
            Console.WriteLine("üü£ FuncionarioService.DeleteFuncionario()");

            Funcionario funcionario = new Funcionario();
            funcionario.IdFuncionario = idFuncionario; // dispara valida√ß√£o do IdFuncionario

            return await _funcionarioDAO.Delete(funcionario);
        }

        /// <summary>
        /// Autentica um funcion√°rio pelo email e senha
        /// üîπ Verifica se o usu√°rio existe e valida senha
        /// üîπ Gera token JWT e retorna objeto Usuario
        /// </summary>
        public async Task<Usuario> LoginFuncionario(string email, string senha)
        {
            Console.WriteLine("üü£ FuncionarioService.LoginFuncionario()");

            // 6Ô∏è‚É£ Cria objeto Funcionario apenas para consulta
            Funcionario funcionario = new Funcionario();
            funcionario.Email = email;
            funcionario.Senha = senha;

            // 7Ô∏è‚É£ Consulta no DAO
            Funcionario encontrado = await _funcionarioDAO.Login(funcionario);

            // 8Ô∏è‚É£ Se n√£o encontrado, lan√ßa erro de autentica√ß√£o
            if (encontrado == null)
            {
                throw new ErrorResponse(
                    401,
                    "Usu√°rio ou senha inv√°lidos",
                    new { message = "N√£o foi poss√≠vel realizar autentica√ß√£o" }
                );
            }
         

                // 9Ô∏è‚É£ Gera√ß√£o de token JWT com informa√ß√µes do usu√°rio
                MeuTokenJWT jwt = new MeuTokenJWT();
                string token = jwt.GerarToken(new Dictionary<string, object>
            {
                { "email", encontrado.Email },
                { "role", encontrado.Cargo?.NomeCargo ?? "" },
                { "name", encontrado.NomeFuncionario ?? "" },
                { "idFuncionario", encontrado.IdFuncionario.ToString() }
            });

                // üîü Monta objeto Usuario para retorno
                Usuario usuario = new Usuario();
                usuario.Cargo = encontrado.Cargo;
                usuario.IdFuncionario = encontrado.IdFuncionario;
                usuario.NomeFuncionario = encontrado.NomeFuncionario;
                usuario.Token = token;

                return usuario;
            
        }
    }
}
