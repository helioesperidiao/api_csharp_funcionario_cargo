using Microsoft.AspNetCore.Http;
using System;
using System.Threading.Tasks;
using Api.Utils; // Para ErrorResponse

namespace Api.Middleware
{
    /// <summary>
    /// Middleware respons√°vel por capturar e tratar exce√ß√µes lan√ßadas
    /// durante o processamento das requisi√ß√µes HTTP.
    /// 
    /// üîπ Permite centralizar o tratamento de erros, retornando respostas
    /// padronizadas para o cliente e evitando exposi√ß√£o de detalhes sens√≠veis.
    /// </summary>
    public class ErrorHandlingMiddleware
    {
        // 1Ô∏è‚É£ RequestDelegate representa o pr√≥ximo middleware na pipeline
        private readonly RequestDelegate _next;

        /// <summary>
        /// Construtor do middleware recebe o pr√≥ximo delegate da pipeline.
        /// </summary>
        public ErrorHandlingMiddleware(RequestDelegate next)
        {
            _next = next;
        }

        /// <summary>
        /// M√©todo chamado automaticamente pelo ASP.NET Core
        /// para processar cada requisi√ß√£o HTTP.
        /// </summary>
        public async Task InvokeAsync(HttpContext context)
        {
            try
            {
                // 2Ô∏è‚É£ Tenta executar o pr√≥ximo middleware ou endpoint
                await _next(context);
            }
            catch (ErrorResponse ex) // 3Ô∏è‚É£ Captura exce√ß√µes customizadas
            {
                Console.WriteLine("üü° ErrorResponse capturada no middleware");

                // 4Ô∏è‚É£ Define o tipo da resposta HTTP como JSON
                context.Response.ContentType = "application/json";

                // 5Ô∏è‚É£ Usa o c√≥digo HTTP da exce√ß√£o personalizada
                context.Response.StatusCode = ex.HttpCode;

                // 6Ô∏è‚É£ Monta objeto de resposta padronizado
                Object resposta = new
                {
                    success = false,
                    message = ex.Message, // Mensagem amig√°vel
                    error = new { message = ex.Error } // Detalhe do erro
                };

                // 7Ô∏è‚É£ Envia resposta JSON para o cliente
                await context.Response.WriteAsJsonAsync(resposta);
            }
            catch (Exception ex) // 8Ô∏è‚É£ Captura exce√ß√µes gerais n√£o previstas
            {
                Console.WriteLine("üü° Exce√ß√£o geral capturada no middleware");

                context.Response.ContentType = "application/json";
                context.Response.StatusCode = 400; // Bad Request

                // 9Ô∏è‚É£ Monta objeto de resposta para erros gerais
                Object resposta = new
                {
                    success = false,
                    message = "Ocorreu um erro interno no servidor",
                    //data = new { stack = ex.StackTrace }, // opcional para depura√ß√£o
                    error = new { message = ex.Message } // Mensagem do erro real
                };

                // 10Ô∏è‚É£ Loga a resposta no console para an√°lise
                Console.Error.WriteLine(resposta);

                // 11Ô∏è‚É£ Envia resposta JSON para o cliente
                await context.Response.WriteAsJsonAsync(resposta);
            }
        }
    }
}
