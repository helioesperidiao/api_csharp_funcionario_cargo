using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using Api.Utils;

namespace Api.Filters
{
    /// <summary>
    /// Filtro de autoriza√ß√£o que valida tokens JWT usando a classe MeuTokenJWT.
    /// Pode ser aplicado em controladores ou m√©todos espec√≠ficos.
    /// 
    /// üîπ IAuthorizationFilter permite executar l√≥gica antes do controller ser chamado,
    /// garantindo que apenas requisi√ß√µes autorizadas continuem.
    /// </summary>
    public class ValidateToken : Attribute, IAuthorizationFilter
    {
        /// <summary>
        /// Executado antes do controller, valida o token JWT presente no cabe√ßalho Authorization.
        /// </summary>
        public void OnAuthorization(AuthorizationFilterContext context)
        {
            Console.WriteLine("üîê ValidateTokenAttribute executando...");

            // 1Ô∏è‚É£ Obt√©m o cabe√ßalho Authorization da requisi√ß√£o
            string? authHeader = context.HttpContext.Request.Headers["Authorization"].FirstOrDefault();

            // 2Ô∏è‚É£ Se o cabe√ßalho estiver ausente ou vazio, retorna 401 Unauthorized
            if (string.IsNullOrWhiteSpace(authHeader))
            {
                context.Result = new JsonResult(new
                {
                    erro = "Cabe√ßalho 'Authorization' ausente."
                })
                { StatusCode = 401 };
                return;
            }

            // 3Ô∏è‚É£ Remove o prefixo "Bearer" e espa√ßos extras para extrair o token puro
            string token = authHeader.Replace("Bearer", "").Trim();

            // 4Ô∏è‚É£ Se o token estiver vazio ap√≥s a limpeza, retorna 401 Unauthorized
            if (string.IsNullOrWhiteSpace(token))
            {
                context.Result = new JsonResult(new
                {
                    erro = "Token JWT vazio ou inv√°lido."
                })
                { StatusCode = 401 };
                return;
            }

            // 5Ô∏è‚É£ Valida o token usando a classe personalizada MeuTokenJWT
            MeuTokenJWT jwt = new MeuTokenJWT();
            bool valido = jwt.ValidarToken(token);

            // 6Ô∏è‚É£ Se o token for inv√°lido ou expirado, retorna 401 Unauthorized
            if (!valido)
            {
                context.Result = new JsonResult(new
                {
                    erro = "Token inv√°lido ou expirado."
                })
                { StatusCode = 401 };
                return;
            }

            // 7Ô∏è‚É£ Se o token for v√°lido, adiciona informa√ß√µes do usu√°rio no contexto HTTP
            // Isso permite que o controller acesse Email, IdFuncionario e Role do usu√°rio
            context.HttpContext.Items["Email"] = jwt.Email;
            context.HttpContext.Items["IdFuncionario"] = jwt.IdFuncionario;
            context.HttpContext.Items["Role"] = jwt.Role;

            Console.WriteLine($"‚úÖ Token v√°lido para: {jwt.Email}");
        }
    }
}
