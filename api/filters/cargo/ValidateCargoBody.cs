using Microsoft.AspNetCore.Mvc.Filters;
using System.Text.Json;
using Api.Utils;

namespace Api.Filters
{
    /// <summary>
    /// Filtro de a√ß√£o respons√°vel por validar o corpo da requisi√ß√£o
    /// para opera√ß√µes relacionadas √† entidade Cargo.
    /// 
    /// üîπ ActionFilterAttribute permite executar l√≥gica antes ou depois
    /// de um endpoint do controller ser chamado.
    /// </summary>
    public class ValidateCargoBody : ActionFilterAttribute
    {
        /// <summary>
        /// Executado antes do m√©todo do controller.
        /// Aqui validamos se o corpo da requisi√ß√£o cont√©m o objeto cargo
        /// e se os campos obrigat√≥rios est√£o presentes.
        /// </summary>
        public override void OnActionExecuting(ActionExecutingContext context)
        {
            Console.WriteLine("üî∂ ValidateCargoBody.OnActionExecuting()");

            // 1Ô∏è‚É£ Verifica se o ActionArguments cont√©m o corpo da requisi√ß√£o
            // "requestBody" √© o nome do par√¢metro esperado no controller
            if (!context.ActionArguments.TryGetValue("requestBody", out var jsonBody) || jsonBody == null)
            {
                // 2Ô∏è‚É£ Lan√ßa exce√ß√£o personalizada se o corpo n√£o estiver presente
                throw new ErrorResponse(
                    400,
                    "O objeto 'cargo' √© obrigat√≥rio!",
                    new { detalhe = "Corpo da requisi√ß√£o ausente ou incorreto" }
                );
            }

            // 3Ô∏è‚É£ Converte o objeto recebido para JsonElement para manipula√ß√£o
            if (jsonBody is not JsonElement json)
            {
                // 4Ô∏è‚É£ Se n√£o for JSON v√°lido, retorna erro
                throw new ErrorResponse(
                    400,
                    "Formato inv√°lido",
                    new { detalhe = "O corpo da requisi√ß√£o n√£o √© um JSON v√°lido" }
                );
            }

            // 5Ô∏è‚É£ Verifica se a propriedade "cargo" existe dentro do JSON
            if (!json.TryGetProperty("cargo", out JsonElement cargoElem))
            {
                // 6Ô∏è‚É£ Se n√£o existir, retorna erro
                throw new ErrorResponse(
                    400,
                    "O objeto 'cargo' √© obrigat√≥rio!",
                    new { detalhe = "Propriedade 'cargo' ausente" }
                );
            }

            // 7Ô∏è‚É£ Verifica se "cargo" possui a propriedade obrigat√≥ria "nomeCargo"
            if (!cargoElem.TryGetProperty("nomeCargo", out JsonElement nomeElem) ||
                string.IsNullOrWhiteSpace(nomeElem.GetString()))
            {
                // 8Ô∏è‚É£ Se estiver ausente ou vazio, retorna erro
                throw new ErrorResponse(
                    400,
                    "O campo 'nomeCargo' √© obrigat√≥rio!",
                    new { detalhe = "Campo vazio ou n√£o informado" }
                );
            }

            // 9Ô∏è‚É£ Se todas valida√ß√µes passarem, o fluxo segue para o controller
            // N√£o √© necess√°rio chamar base.OnActionExecuting, pois n√£o h√° l√≥gica adicional
        }
    }
}
