using System;
using System.Collections.Generic;
using System.Data;
using System.Threading.Tasks;
using MySqlConnector;
using Api.Database;
using Api.Model;

namespace Api.Dao
{
    /// <summary>
    /// Classe respons√°vel por realizar opera√ß√µes no banco de dados
    /// relacionadas √† entidade Cargo.
    /// 
    /// üîπ Padr√£o utilizado: DAO (Data Access Object)
    /// O objetivo √© isolar toda a l√≥gica de acesso ao banco de dados.
    /// </summary>
    public class CargoDAO
    {
        private readonly MySqlDatabase _database;

        /// <summary>
        /// Construtor do DAO, recebe a inst√¢ncia de MySqlDatabase.
        /// Essa inst√¢ncia ser√° usada para obter conex√µes com o banco.
        /// </summary>
        public CargoDAO(MySqlDatabase databaseInstance)
        {
            Console.WriteLine("‚¨ÜÔ∏è  CargoDAO.constructor()");
            _database = databaseInstance ?? throw new ArgumentNullException(nameof(databaseInstance));
        }

        // ============================================================
        // M√âTODO CREATE
        // ============================================================

        /// <summary>
        /// Cria (insere) um novo cargo no banco de dados.
        /// </summary>
        public async Task<int> Create(Cargo objCargoModel)
        {
            Console.WriteLine("üü¢ CargoDAO.Create()");

            // 1Ô∏è‚É£ Defini√ß√£o do comando SQL (usando par√¢metros para evitar SQL Injection)
            string SQL = "INSERT INTO cargo (nomeCargo) VALUES (@nomeCargo);";

            // 2Ô∏è‚É£ Abre uma nova conex√£o com o banco (m√©todo GetConnection j√° faz o OpenAsync)
            await using MySqlConnection conn = await _database.GetConnection();

            // 3Ô∏è‚É£ Cria o comando MySQL associando o SQL e a conex√£o
            await using MySqlCommand cmd = new MySqlCommand(SQL, conn);

            // 4Ô∏è‚É£ Substitui o par√¢metro @nomeCargo pelo valor vindo do objeto Cargo
            cmd.Parameters.AddWithValue("@nomeCargo", objCargoModel.NomeCargo);

            // 5Ô∏è‚É£ Executa o comando SQL (INSERT) e n√£o espera retorno de dados (apenas resultado)
            await cmd.ExecuteNonQueryAsync();

            // 6Ô∏è‚É£ Obt√©m o ID gerado automaticamente no banco (auto_increment)
            int insertedId = (int)cmd.LastInsertedId;

            // 7Ô∏è‚É£ Valida√ß√£o b√°sica ‚Äî se o ID n√£o for gerado, algo deu errado
            if (insertedId <= 0)
            {
                throw new Exception("Falha ao inserir cargo");
            }

            // 8Ô∏è‚É£ Retorna o ID do novo registro inserido
            return insertedId;
        }

        // ============================================================
        // M√âTODO DELETE
        // ============================================================

        /// <summary>
        /// Remove um cargo do banco de dados pelo ID.
        /// </summary>
        public async Task<bool> Delete(Cargo objCargoModel)
        {
            Console.WriteLine("üü¢ CargoDAO.Delete()");

            // 1Ô∏è‚É£ Comando SQL com filtro pelo idCargo
            string SQL = "DELETE FROM cargo WHERE idCargo = @idCargo;";

            // 2Ô∏è‚É£ Cria√ß√£o da conex√£o e comando SQL
            await using MySqlConnection conn = await _database.GetConnection();
            await using MySqlCommand cmd = new MySqlCommand(SQL, conn);

            // 3Ô∏è‚É£ Substitui o par√¢metro pelo valor do objeto Cargo
            cmd.Parameters.AddWithValue("@idCargo", objCargoModel.IdCargo);

            // 4Ô∏è‚É£ Executa o comando e retorna o n√∫mero de linhas afetadas
            int affectedRows = await cmd.ExecuteNonQueryAsync();

            // 5Ô∏è‚É£ Retorna true se ao menos uma linha foi exclu√≠da
            return affectedRows > 0;
        }

        // ============================================================
        // M√âTODO UPDATE
        // ============================================================

        /// <summary>
        /// Atualiza os dados de um cargo existente.
        /// </summary>
        public async Task<bool> Update(Cargo objCargoModel)
        {
            Console.WriteLine("üü¢ CargoDAO.Update()");

            // 1Ô∏è‚É£ SQL de atualiza√ß√£o
            string SQL = "UPDATE cargo SET nomeCargo = @nomeCargo WHERE idCargo = @idCargo;";

            // 2Ô∏è‚É£ Conex√£o e comando
            await using MySqlConnection conn = await _database.GetConnection();
            await using MySqlCommand cmd = new MySqlCommand(SQL, conn);

            // 3Ô∏è‚É£ Substitui par√¢metros pelos valores do objeto
            cmd.Parameters.AddWithValue("@nomeCargo", objCargoModel.NomeCargo);
            cmd.Parameters.AddWithValue("@idCargo", objCargoModel.IdCargo);

            // 4Ô∏è‚É£ Executa o UPDATE
            int affectedRows = await cmd.ExecuteNonQueryAsync();

            // 5Ô∏è‚É£ Retorna true se a atualiza√ß√£o afetou pelo menos uma linha
            return affectedRows > 0;
        }

        // ============================================================
        // M√âTODO FIND ALL
        // ============================================================

        /// <summary>
        /// Retorna todos os cargos cadastrados no banco de dados.
        /// </summary>
        public async Task<List<Cargo>> FindAll()
        {
            Console.WriteLine("üü¢ CargoDAO.FindAll()");

            // 1Ô∏è‚É£ Comando SQL para buscar todos os cargos
            string SQL = "SELECT * FROM cargo;";

            // 2Ô∏è‚É£ Lista onde ser√£o armazenados os resultados
            List<Cargo> result = new List<Cargo>();

            // 3Ô∏è‚É£ Cria√ß√£o da conex√£o, comando e leitor de dados
            await using MySqlConnection conn = await _database.GetConnection();
            await using MySqlCommand cmd = new MySqlCommand(SQL, conn);
            await using MySqlDataReader registros = await cmd.ExecuteReaderAsync();

            // 4Ô∏è‚É£ Percorre cada linha retornada pelo SELECT
            while (await registros.ReadAsync())
            {
                // Cria um objeto Cargo e preenche com os dados do banco
                Cargo linha = new Cargo();
                linha.IdCargo = registros.GetInt32("idCargo");
                linha.NomeCargo = registros.GetString("nomeCargo");

                // Adiciona o objeto na lista
                result.Add(linha);
            }

            // 5Ô∏è‚É£ Retorna a lista de cargos preenchida
            return result;
        }

        // ============================================================
        // M√âTODO FIND BY ID
        // ============================================================

        /// <summary>
        /// Busca um cargo espec√≠fico pelo seu ID.
        /// </summary>
        public async Task<Cargo?> FindById(int idCargo)
        {
            Console.WriteLine("üü¢ CargoDAO.FindById()");

            // üî∏ Reutiliza o m√©todo gen√©rico FindByField para n√£o repetir c√≥digo
            List<Cargo> listaCargos = await FindByField("idCargo", idCargo);

            // üî∏ Retorna o primeiro item, ou null se n√£o encontrar
            return listaCargos.Count > 0 ? listaCargos[0] : null;
        }

        // ============================================================
        // M√âTODO FIND BY FIELD
        // ============================================================

        /// <summary>
        /// Busca cargos por um campo espec√≠fico (idCargo ou nomeCargo).
        /// </summary>
        public async Task<List<Cargo>> FindByField(string field, object value)
        {
            Console.WriteLine($"üü¢ CargoDAO.FindByField() - Campo: {field}, Valor: {value}");

            // 1Ô∏è‚É£ Valida√ß√£o do campo para evitar SQL Injection
            HashSet<string> allowedFields = new HashSet<string> { "idCargo", "nomeCargo" };
            if (!allowedFields.Contains(field))
                throw new ArgumentException($"Campo inv√°lido para busca: {field}");

            // 2Ô∏è‚É£ Monta a query dinamicamente com o campo v√°lido
            string SQL = $"SELECT * FROM cargo WHERE {field} = @value;";

            // 3Ô∏è‚É£ Lista para armazenar os resultados
            List<Cargo> listaCargos = new List<Cargo>();

            // 4Ô∏è‚É£ Cria a conex√£o e o comando SQL
            await using MySqlConnection conn = await _database.GetConnection();
            await using MySqlCommand cmd = new MySqlCommand(SQL, conn);
            cmd.Parameters.AddWithValue("@value", value);

            // 5Ô∏è‚É£ Executa o SELECT e l√™ os registros retornados
            await using MySqlDataReader registros = await cmd.ExecuteReaderAsync();

            while (await registros.ReadAsync())
            {
                // Monta o objeto Cargo a partir dos dados do banco
                Cargo cargo = new Cargo();
                cargo.IdCargo = registros.GetInt32("idCargo");
                cargo.NomeCargo = registros.GetString("nomeCargo");
                listaCargos.Add(cargo);
            }

            // 6Ô∏è‚É£ Retorna a lista de cargos encontrados
            return listaCargos;
        }
    }
}
