using System;
using System.Collections.Generic;
using System.Data;
using System.Threading.Tasks;
using MySqlConnector;
using Api.Database;
using Api.Model;
using Org.BouncyCastle.Crypto.Generators;

namespace Api.Dao
{
    /// <summary>
    /// Classe respons√°vel por realizar opera√ß√µes no banco de dados
    /// relacionadas √† entidade Funcionario.
    /// 
    /// üîπ Padr√£o DAO (Data Access Object)
    /// Separa a l√≥gica de acesso a dados da l√≥gica de neg√≥cio.
    /// </summary>
    public class FuncionarioDAO
    {
        private readonly MySqlDatabase _database;

        /// <summary>
        /// Construtor do DAO.
        /// Recebe a inst√¢ncia de MySqlDatabase que gerencia as conex√µes com o banco.
        /// </summary>
        public FuncionarioDAO(MySqlDatabase databaseInstance)
        {
            Console.WriteLine("‚¨ÜÔ∏è  FuncionarioDAO.constructor()");
            _database = databaseInstance ?? throw new ArgumentNullException(nameof(databaseInstance));
        }

        // ============================================================
        // M√âTODO CREATE (INSER√á√ÉO DE FUNCION√ÅRIO)
        // ============================================================
        public async Task<int> Create(Funcionario objFuncionario)
        {
            Console.WriteLine("üü¢ FuncionarioDAO.Create()");

            // 1Ô∏è‚É£ SQL com par√¢metros nomeados para evitar SQL Injection
            string SQL = @"
                INSERT INTO Funcionario 
                (nomeFuncionario, email, senha, recebeValeTransporte, Cargo_idCargo) 
                VALUES (@nomeFuncionario, @email, @senha, @recebeValeTransporte, @Cargo_idCargo);";

            // 2Ô∏è‚É£ Abre conex√£o com o banco de dados
            await using MySqlConnection conn = await _database.GetConnection();

            // 3Ô∏è‚É£ Cria comando SQL associado √† conex√£o
            await using MySqlCommand cmd = new MySqlCommand(SQL, conn);

            // 4Ô∏è‚É£ Adiciona os valores dos par√¢metros vindos do objeto Funcionario
            cmd.Parameters.AddWithValue("@nomeFuncionario", objFuncionario.NomeFuncionario);
            cmd.Parameters.AddWithValue("@email", objFuncionario.Email);
            cmd.Parameters.AddWithValue("@senha", objFuncionario.Senha);
            cmd.Parameters.AddWithValue("@recebeValeTransporte", objFuncionario.RecebeValeTransporte);
            cmd.Parameters.AddWithValue("@Cargo_idCargo", objFuncionario.Cargo.IdCargo);

            // 5Ô∏è‚É£ Executa o comando no banco
            await cmd.ExecuteNonQueryAsync();

            // 6Ô∏è‚É£ Obt√©m o ID do registro rec√©m-inserido
            int insertedId = (int)cmd.LastInsertedId;

            // 7Ô∏è‚É£ Valida√ß√£o b√°sica: se ID <= 0, algo deu errado
            if (insertedId <= 0)
            {
                throw new Exception("Falha ao inserir funcion√°rio");
            }

            // 8Ô∏è‚É£ Retorna o ID do funcion√°rio inserido
            return insertedId;
        }

        // ============================================================
        // M√âTODO DELETE (EXCLUS√ÉO DE FUNCION√ÅRIO)
        // ============================================================
        public async Task<bool> Delete(Funcionario objFuncionario)
        {
            Console.WriteLine("üü¢ FuncionarioDAO.Delete()");

            // 1Ô∏è‚É£ SQL para deletar funcion√°rio pelo ID
            string SQL = "DELETE FROM Funcionario WHERE idFuncionario = @idFuncionario;";

            // 2Ô∏è‚É£ Abre conex√£o e cria comando
            await using MySqlConnection conn = await _database.GetConnection();
            await using MySqlCommand cmd = new MySqlCommand(SQL, conn);

            // 3Ô∏è‚É£ Substitui par√¢metro pelo ID do funcion√°rio
            cmd.Parameters.AddWithValue("@idFuncionario", objFuncionario.IdFuncionario);

            // 4Ô∏è‚É£ Executa o comando e retorna o n√∫mero de linhas afetadas
            int affectedRows = await cmd.ExecuteNonQueryAsync();

            // 5Ô∏è‚É£ Retorna true se alguma linha foi deletada
            return affectedRows > 0;
        }

        // ============================================================
        // M√âTODO UPDATE (ATUALIZA√á√ÉO DE FUNCION√ÅRIO)
        // ============================================================
        public async Task<bool> Update(Funcionario objFuncionario)
        {
            Console.WriteLine("üü¢ FuncionarioDAO.Update()");

            // 1Ô∏è‚É£ SQL de atualiza√ß√£o com par√¢metros nomeados
            string SQL = @"
                UPDATE Funcionario 
                SET nomeFuncionario=@nomeFuncionario, email=@email, senha=@senha, 
                    recebeValeTransporte=@recebeValeTransporte, Cargo_idCargo=@Cargo_idCargo 
                WHERE idFuncionario=@idFuncionario;";

            // 2Ô∏è‚É£ Abre conex√£o e cria comando
            await using MySqlConnection conn = await _database.GetConnection();
            await using MySqlCommand cmd = new MySqlCommand(SQL, conn);

            // 3Ô∏è‚É£ Define os valores dos par√¢metros
            cmd.Parameters.AddWithValue("@nomeFuncionario", objFuncionario.NomeFuncionario);
            cmd.Parameters.AddWithValue("@email", objFuncionario.Email);
            cmd.Parameters.AddWithValue("@senha", objFuncionario.Senha);
            cmd.Parameters.AddWithValue("@recebeValeTransporte", objFuncionario.RecebeValeTransporte);
            cmd.Parameters.AddWithValue("@Cargo_idCargo", objFuncionario.Cargo.IdCargo);
            cmd.Parameters.AddWithValue("@idFuncionario", objFuncionario.IdFuncionario);

            // 4Ô∏è‚É£ Executa o comando e obt√©m n√∫mero de linhas afetadas
            int affectedRows = await cmd.ExecuteNonQueryAsync();

            // 5Ô∏è‚É£ Retorna true se algum registro foi atualizado
            return affectedRows > 0;
        }

        // ============================================================
        // M√âTODO FIND ALL (LISTAR TODOS FUNCION√ÅRIOS)
        // ============================================================
        public async Task<List<Funcionario>> FindAll()
        {
            Console.WriteLine("üü¢ FuncionarioDAO.FindAll()");

            // 1Ô∏è‚É£ SQL para buscar todos os funcion√°rios, incluindo dados do cargo
            string SQL = "SELECT * FROM funcionario JOIN cargo ON cargo.idCargo = funcionario.idFuncionario";

            // 2Ô∏è‚É£ Lista que armazenar√° os registros lidos do banco
            List<Funcionario> listaFuncionarios = new List<Funcionario>();

            // 3Ô∏è‚É£ Abre conex√£o e cria comando
            await using MySqlConnection conn = await _database.GetConnection();
            await using MySqlCommand cmd = new MySqlCommand(SQL, conn);

            // 4Ô∏è‚É£ Executa o SELECT e obt√©m um leitor de dados
            await using MySqlDataReader registros = await cmd.ExecuteReaderAsync();

            // 5Ô∏è‚É£ Itera cada linha retornada pelo banco
            while (await registros.ReadAsync())
            {
                // 5.1Ô∏è‚É£ Cria objeto Funcionario e preenche seus atributos
                Funcionario registro = new Funcionario();
                registro.IdFuncionario = registros.GetInt32("idFuncionario");
                registro.NomeFuncionario = registros.GetString("nomeFuncionario");
                registro.Email = registros.GetString("email");
                registro.RecebeValeTransporte = registros.GetInt32("recebeValeTransporte");
                
                registro.Cargo.IdCargo = registros.GetInt32("idCargo");
                registro.Cargo.NomeCargo = registros.GetString("nomeCargo");

                // 5.2Ô∏è‚É£ Adiciona o objeto √† lista de resultados
                listaFuncionarios.Add(registro);
            }

            // 6Ô∏è‚É£ Retorna a lista completa de funcion√°rios
            return listaFuncionarios;
        }

        // ============================================================
        // M√âTODO FIND BY ID (BUSCAR FUNCION√ÅRIO POR ID)
        // ============================================================
        public async Task<Funcionario?> FindById(int idFuncionario)
        {
            Console.WriteLine("üü¢ FuncionarioDAO.FindById()");

            // 1Ô∏è‚É£ Reutiliza m√©todo FindByField para n√£o duplicar c√≥digo
            List<Funcionario> results = await FindByField("idFuncionario", idFuncionario);

            // 2Ô∏è‚É£ Retorna o primeiro registro encontrado ou null
            return results.Count > 0 ? results[0] : null;
        }

        // ============================================================
        // M√âTODO FIND BY FIELD (BUSCA FUNCION√ÅRIOS POR QUALQUER CAMPO)
        // ============================================================
        public async Task<List<Funcionario>> FindByField(string field, object value)
        {
            Console.WriteLine($"üü¢ FuncionarioDAO.FindByField() - Campo: {field}, Valor: {value}");

            // 1Ô∏è‚É£ Valida√ß√£o de campos permitidos para evitar SQL Injection
            HashSet<string> allowedFields = new HashSet<string>
            { "idFuncionario", "nomeFuncionario", "email", "Cargo_idCargo" };

            if (!allowedFields.Contains(field))
                throw new ArgumentException($"Campo inv√°lido para busca: {field}");

            // 2Ô∏è‚É£ SQL de busca com par√¢metro
            string SQL = $"SELECT * FROM Funcionario join cargo on cargo.idcargo = funcionario.cargo_idCargo WHERE {field} = @value;";

            // 3Ô∏è‚É£ Lista que armazenar√° os registros encontrados
            List<Funcionario> result = new List<Funcionario>();

            // 4Ô∏è‚É£ Cria conex√£o e comando
            await using MySqlConnection conn = await _database.GetConnection();
            await using MySqlCommand cmd = new MySqlCommand(SQL, conn);
            cmd.Parameters.AddWithValue("@value", value);

            // 5Ô∏è‚É£ Executa SELECT e obt√©m leitor de dados
            await using MySqlDataReader registros = await cmd.ExecuteReaderAsync();

            // 6Ô∏è‚É£ Itera os registros retornados
            while (await registros.ReadAsync())
            {
                Funcionario row = new Funcionario();
                row.IdFuncionario = registros.GetInt32("idFuncionario");
                row.NomeFuncionario = registros.GetString("nomeFuncionario");
                row.Email = registros.GetString("email");
                row.Senha = registros.GetString("senha");
                row.RecebeValeTransporte = registros.GetInt32("recebeValeTransporte");
                row.Cargo.IdCargo = registros.GetInt32("idCargo");
                row.Cargo.NomeCargo = registros.GetString("nomeCargo");

                result.Add(row);
            }

            // 7Ô∏è‚É£ Retorna a lista de funcion√°rios encontrados
            return result;
        }

        // ============================================================
        // M√âTODO LOGIN (AUTENTICA√á√ÉO)
        // ============================================================
        public async Task<Funcionario?> Login(Funcionario funcionario)
        {
            Console.WriteLine("üü¢ FuncionarioDAO.Login()");

            // 1Ô∏è‚É£ SQL para buscar funcion√°rio pelo email, incluindo o cargo
            string SQL = @"
                SELECT * 
                FROM funcionario
                JOIN cargo on cargo.idCargo = funcionario.Cargo_idCargo
                WHERE email = @Email;";

            // 2Ô∏è‚É£ Abre conex√£o e cria comando
            await using MySqlConnection connection = await _database.GetConnection();
            await using MySqlCommand command = new MySqlCommand(SQL, connection);
            command.Parameters.AddWithValue("@Email", funcionario.Email);

            // 3Ô∏è‚É£ Executa SELECT e obt√©m leitor
            await using MySqlDataReader registros = await command.ExecuteReaderAsync();

            // 4Ô∏è‚É£ Se n√£o encontrou registro, retorna null
            if (!await registros.ReadAsync())
            {
                Console.WriteLine("‚ùå Funcion√°rio n√£o encontrado");
                return null;
            }

            // 5Ô∏è‚É£ Valida a senha usando BCrypt
            string senhaHash = registros.GetString("senha");
            bool senhaValida = BCrypt.Net.BCrypt.Verify(funcionario.Senha, senhaHash);
            if (!senhaValida)
            {
                Console.WriteLine("‚ùå Senha inv√°lida");
                return null;
            }

            // 6Ô∏è‚É£ Monta objeto Cargo
            Cargo cargo = new Cargo();
            cargo.IdCargo = registros.GetInt32("idCargo");
            cargo.NomeCargo = registros.GetString("nomeCargo");

            // 7Ô∏è‚É£ Preenche objeto Funcionario com os dados do banco
            funcionario.IdFuncionario = registros.GetInt32("idFuncionario");
            funcionario.NomeFuncionario = registros.GetString("nomeFuncionario");
            funcionario.RecebeValeTransporte = registros.GetInt32("recebeValeTransporte");
            funcionario.Cargo.IdCargo = registros.GetInt32("idCargo");

            // 8Ô∏è‚É£ Retorna o funcion√°rio autenticado
            return funcionario;
        }
    }
}
