using System;

namespace Api.Model
{
    /// <summary>
    /// Representa a entidade Funcionario do sistema.
    /// 
    /// Objetivo:
    /// - Encapsular os dados de um funcion√°rio.
    /// - Garantir integridade dos atributos via getters e setters.
    /// üîπ Demonstra conceitos de POO: encapsulamento, valida√ß√£o e composi√ß√£o.
    /// </summary>
    public class Funcionario
    {
        // 1Ô∏è‚É£ Atributos privados
        // üîπ Mant√™m o estado interno da classe e for√ßam o uso de propriedades para acesso
        private int _idFuncionario;
        private string _nomeFuncionario = string.Empty;
        private string _email = string.Empty;
        private string _senha = string.Empty;
        private int _recebeValeTransporte;
        private Cargo _cargo;

        /// <summary>
        /// Construtor padr√£o
        /// üîπ Inicializa o objeto Funcionario e instancia o Cargo associado
        /// </summary>
        public Funcionario()
        {
            // Console.WriteLine("‚¨ÜÔ∏è Funcionario.constructor()");
            this._cargo = new Cargo(); // 2Ô∏è‚É£ Composi√ß√£o: cada funcion√°rio tem um cargo
        }

        /// <summary>
        /// Identificador √∫nico do funcion√°rio
        /// üîπ Regra: n√∫mero inteiro positivo
        /// </summary>
        public int IdFuncionario
        {
            get => this._idFuncionario; // 3Ô∏è‚É£ Getter
            set
            {
                // 4Ô∏è‚É£ Valida se o ID √© positivo
                if (value <= 0)
                {
                    throw new ArgumentException("IdFuncionario deve ser maior que zero.");
                }

                this._idFuncionario = value; // 5Ô∏è‚É£ Setter
            }
        }

        /// <summary>
        /// Nome do funcion√°rio
        /// üîπ Regra: se fornecido, entre 3 e 128 caracteres
        /// </summary>
        public string NomeFuncionario
        {
            get => this._nomeFuncionario;
            set
            {
                if (string.IsNullOrWhiteSpace(value))
                {
                    // 6Ô∏è‚É£ Se n√£o informado, atribui string vazia
                    this._nomeFuncionario = string.Empty;
                    return;
                }

                string nome = value.Trim();

                // 7Ô∏è‚É£ Valida tamanho m√≠nimo
                if (nome.Length < 3)
                {
                    throw new ArgumentException("NomeFuncionario deve ter pelo menos 3 caracteres.");
                }

                // 8Ô∏è‚É£ Valida tamanho m√°ximo
                if (nome.Length > 128)
                {
                    throw new ArgumentException("NomeFuncionario deve ter no m√°ximo 128 caracteres.");
                }

                this._nomeFuncionario = nome;
            }
        }

        /// <summary>
        /// Email do funcion√°rio
        /// üîπ Regra: se fornecido, no m√°ximo 64 caracteres
        /// </summary>
        public string Email
        {
            get => this._email;
            set
            {
                if (string.IsNullOrWhiteSpace(value))
                {
                    this._email = string.Empty;
                    return;
                }

                string email = value.Trim();

                // 9Ô∏è‚É£ Valida tamanho m√°ximo
                if (email.Length > 64)
                {
                    throw new ArgumentException("Email deve ter no m√°ximo 64 caracteres.");
                }

                this._email = email;
            }
        }

        /// <summary>
        /// Senha do funcion√°rio
        /// üîπ Regra: se fornecido, no m√°ximo 64 caracteres
        /// </summary>
        public string Senha
        {
            get => this._senha;
            set
            {
                if (string.IsNullOrWhiteSpace(value))
                {
                    this._senha = string.Empty;
                    return;
                }

                string senha = value.Trim();

                // 10Ô∏è‚É£ Valida tamanho m√°ximo
                if (senha.Length > 64)
                {
                    throw new ArgumentException("Senha deve ter no m√°ximo 64 caracteres.");
                }

                this._senha = senha;
            }
        }

        /// <summary>
        /// Indica se o funcion√°rio recebe vale transporte
        /// üîπ Regra: valor booleano (0 ou 1)
        /// </summary>
        public int RecebeValeTransporte
        {
            get => _recebeValeTransporte;
            set
            {
                // 11Ô∏è‚É£ Valida se √© 0 ou 1
                if (value != 0 && value != 1)
                {
                    throw new ArgumentException("O valor de RecebeValeTransporte deve ser 0 ou 1.");
                }

                _recebeValeTransporte = value;
            }
        }

        /// <summary>
        /// Cargo associado ao funcion√°rio
        /// üîπ Regra: n√£o pode ser nulo
        /// </summary>
        public Cargo Cargo
        {
            get => this._cargo;
            set
            {
                // 12Ô∏è‚É£ Valida n√£o nulo
                if (value == null)
                {
                    throw new ArgumentException("Cargo n√£o pode ser nulo.");
                }

                this._cargo = value;
            }
        }
    }
}
