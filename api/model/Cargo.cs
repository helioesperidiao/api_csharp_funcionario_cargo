using System;

namespace Api.Model
{
    /// <summary>
    /// Representa a entidade Cargo do sistema.
    /// 
    /// Objetivo:
    /// - Encapsular os dados de um cargo.
    /// - Garantir integridade dos atributos via getters e setters.
    /// üîπ Demonstra conceitos de POO: encapsulamento e valida√ß√£o.
    /// </summary>
    public class Cargo
    {
        // 1Ô∏è‚É£ Atributos privados
        // üîπ Mant√©m o estado interno da classe e for√ßa uso de propriedades para acesso
        private int _idCargo;
        private string _nomeCargo = string.Empty;

        /// <summary>
        /// Construtor padr√£o da classe Cargo.
        /// üîπ Inicializa a inst√¢ncia e permite log para debug se necess√°rio.
        /// </summary>
        public Cargo()
        {
            //Console.WriteLine("‚¨ÜÔ∏è  Cargo.constructor()");
        }

        /// <summary>
        /// Identificador √∫nico do cargo
        /// üîπ Regra: n√∫mero inteiro positivo
        /// üîπ Demonstra valida√ß√£o de entrada via setter
        /// </summary>
        public int IdCargo
        {
            get => this._idCargo; // 2Ô∏è‚É£ Retorna o valor do atributo privado
            set
            {
                // 3Ô∏è‚É£ Valida se o valor √© positivo
                if (value <= 0)
                {
                    throw new ArgumentException("IdCargo deve ser maior que zero.");
                }

                // 4Ô∏è‚É£ Atribui o valor ao atributo privado
                this._idCargo = value;
            }
        }

        /// <summary>
        /// Nome do cargo
        /// üîπ Regra: string n√£o vazia, entre 3 e 64 caracteres
        /// üîπ Demonstra valida√ß√£o de string e trimming
        /// </summary>
        public string NomeCargo
        {
            get => this._nomeCargo; // 5Ô∏è‚É£ Retorna o valor do atributo privado
            set
            {
                // 6Ô∏è‚É£ Verifica se o valor n√£o √© nulo ou vazio
                if (string.IsNullOrWhiteSpace(value))
                {
                    throw new ArgumentException("NomeCargo n√£o pode ser nulo ou vazio.");
                }

                // 7Ô∏è‚É£ Remove espa√ßos extras
                string nome = value.Trim();

                // 8Ô∏è‚É£ Valida tamanho m√≠nimo
                if (nome.Length < 3)
                {
                    throw new ArgumentException("NomeCargo deve ter pelo menos 3 caracteres.");
                }

                // 9Ô∏è‚É£ Valida tamanho m√°ximo
                if (nome.Length > 64)
                {
                    throw new ArgumentException("NomeCargo deve ter no m√°ximo 64 caracteres.");
                }

                // üîπ Atribui o valor validado ao atributo privado
                this._nomeCargo = nome;
            }
        }
    }
}
